{"name":"Simple framework","tagline":"","body":"#[Services][] **Utility tools**\r\n\r\n``simplefwk-utilitytools`` contains two helper tools that abstract low-level details of ROOT's I/O infrastructure. [ROOT][] is a C++ library developed and used primarily by the High Energy Physics community. It is versatile enough to be useful in many applications dealing with large amounts of data. \r\n\r\n##Installation\r\n\r\nA makefile is provided for unix-like operating systems (tested on Mac OS X 10.7.5). Requirements: \r\n* C++11 compliant c++ compiler (e.g. g++ 4.8)\r\n* Python 2.x (e.g. version 2.7.1)\r\n* [swig][] 2.x \r\n* ROOT 5.x \r\n\r\n(All the above can be obtained through [macports][] for Max OS X systems.)\r\n\r\n* ``simplefwk-services`` package\r\n* ``simplefwk-utilitytoolsinterfaces`` package\r\n\r\n##Usage\r\n###Data storage in ROOT\r\n\r\nROOT has its own I/O system that allows to persistify objects (in the Object-Oriented sense) on disk. It provides a data structure called a _tree_ (or a [TTree][]) designed to reduce disk space and enhance data access speed when storing large quantities of same-class objects. A ROOT tree may have many entries and consists in a collection of branches representing objects to be stored once per entry. Branches can then be read back indivdually, as needed, on an entry-by-entry basis. \r\n\r\n###Writing to a TTree\r\n\r\n``RootNtupleWriterTool`` is the helper tool to be used to seamlessly output ntuple-like data to a ROOT file (using the TTree data structure). \r\nThe simplest constructor is as follow:\r\n\r\n````c++\r\nRootNtupleWriterTool::RootNtupleWriterTool(const std::string& name,       //name of the tool\r\n                                           const std::string& file_name,  //ROOT file name\r\n                                           const std::string& tree_name)  //name of TTree\r\n````\r\n\r\nA tool that receives a pointer to an initialized ``RootNtupleWriterTool`` only need to use two methods: one to register branches, and one to fill up branches [With the exception of the event-wise steering, which will be discussed below].\r\n\r\n####Registering branches\r\nA branch is created in the TTree through the following method:\r\n\r\n````c++\r\nint RootNtupleWriterTool::registerBranch(std::string branch_name, IObjectHolder* obj)\r\n````\r\n\r\nHere, the first argument is self-explanatory (a string representing the name of the branch to be created) while the second is a pointer to a newly created object (inheriting from the ``IObjectHolder`` interface) that implements data/memory management functions specific to the class associated with the branch. This extra level of abstraction allows for a generic design where the details of the data to be stored are completely decoupled from the writer tool itself. Concrete ``IObjectHolder`` classes are available in the ``simplefwk-utilitytoolsinterfaces`` package for primitive data types and for STL containers (``std::vector`` notably). The writer tool takes ownership of the ``IObjectHolder`` object.\r\n\r\nA single ``IObjectHolder`` can be used to register _child_ branches. It can, for instance, provide a unique suffix (for each child branch) that will be appended to the ``branch_name`` string by the writer tool. Different member variables within a class can then be stored in independent branches.   \r\n\r\nSince ROOT can only (de)serialize data into a file if it knows about it (through what is called a _dictionnary_), every request for branch creation performs type safety checks to assess the compatibility of the branch data type with ROOT's I/O system.\r\n\r\n####Filling up branches\r\n\r\nOnce a branch has been registered, it can be filled with the following method:\r\n\r\n````c++\r\nint RootNtupleWriterTool::pushBack(std::string branch_name, const boost::any& data)\r\n````\r\n\r\nHere, ``boost::any`` is used for data type abstraction. Safety checks are perform at run-time to make sure the data being passed can be handled by the branch's ``IObjectHolder``. An unregistered branch triggers an error.\r\n\r\n####Steering\r\n\r\nThe event steering is provided by the Incident Service (see ``simplefwk-services``). An example, in Python, would look like the following:\r\n\r\n````python\r\nroot_svc = RootNtupleWriterTool(\"RootTool\", \"tree.root\", \"ttree\")\r\nmytool = ToolThatOutputsData(root_svc)\r\n\r\ninc_svc = IncidentService.getInstance()\r\n\r\ninc_svc.fireIncident(Incident(\"BeginRun\"))\r\n\r\nfor row in mytxtfile:\r\n\r\n  inc_svc.fireIncident(Incident(\"BeginEvent\"))\r\n  \r\n  mytool.execute(row)\r\n  \r\n  inc_svc.fireIncident(Incident(\"EndEvent\"))\r\n  \r\ninc_svc.fireIncident(Incident(\"EndRun\"))  \r\n````\r\n\r\nHere, the tool named _mytool_ can register branches in its constructor or more conveniently when the **BeginRun** incident is fired (by listening for this particular incident). \r\n\r\nThe **BeginEvent** incident is used by the ROOT writer tool to clear the content of the various ``IObjectHolder``s in preparation of ``RootNtupleWriterTool::pushBack`` calls by _mytool_. When the **EndEvent** incident is fired, the TTree is filled with the data stored in the ``IObjectHolder``s for the current event (an event == an entry in the TTree).\r\n\r\nDuring the **EndRun** incident, the TTree is written on disk to the file specified by the user (here, tree.root). \r\n\r\n###Reading from a TTree\r\n\r\n``RootNtupleReaderTool`` is a simple tool that can be used to read branches out of a TTree. The following illustrates its usage in Python:\r\n\r\n````python\r\nroot_svc_reader = RootNtupleReaderTool(\"RootToolReader\",\"tree.root\", \"ttree\")\r\n\r\nientry = 0\r\nwhile True:\r\n     try: \r\n       vec = root_svc_reader.GetBranchEntry_DoubleVector(\"features\",ientry)\r\n       targ = root_svc_reader.GetBranchEntry_Int(\"target\", ientry)\r\n     except BaseException as e:\r\n       print \"Cauth Error! -> \", str(e)\r\n       break\r\n       \r\n     if targ == None: break #End-Of-File\r\n     \r\n     ## do something with vec and targ\r\n     \r\n     ientry += 1\r\n     \r\nprint \"read \", ientry, \" entries\"     \r\n`````\r\n\r\nIn this example, the TTree name **ttree** is read from the file **tree.root** entry by entry. A vector of doubles is read from the branch named **features**, and an integer is read from the **target** branch. In both cases, an exception is thrown if the requested data is not of the type associated with the branch.\r\n\r\n[ROOT]: http://root.cern.ch\r\n[TTree]: http://root.cern.ch/root/html/TTree.html\r\n[swig]: http://swig.org\r\n[macports]: http://www.macports.org/\r\n[Services]: http://chapleau.github.io/simplefwk-services/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}